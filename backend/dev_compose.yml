networks:
  app:
    driver: bridge

services:
  mongodb:
    image: docker.io/library/mongo:6.0
    container_name: einkaufsliste_mongodb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - ./data/mongo-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      TZ: Europe/Berlin
    mem_limit: 1g
    networks:
      - app

  redis:
    image: docker.io/library/redis:6.2
    container_name: einkaufsliste_redis
    restart: always
    ports:
      - "6379:6379"
    environment:
      TZ: Europe/Berlin
    volumes:
      - ./data/redis-data:/data
    command: ["redis-server", "--appendonly", "yes", "--maxmemory", "64mb", "--maxmemory-policy", "allkeys-lru"]
    mem_limit: 512m
    networks:
      - app

  backend:
    image: einkaufsliste_backend
    container_name: einkaufsliste_backend
    build:
      context: .
      dockerfile: api.dockerfile
      args:
        DEBUG: ${DEBUG}
    restart: always
    ports:
      - "8000:8000"
      - "5678:5678" # debug only
    environment:
      MONGO_URI: "mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017"
      REDIS_HOST: ${REDIS_HOST}
      MONGO_DATABASE: ${MONGO_DATABASE}
      SECRET_KEY: ${SECRET_KEY}
      ADMIN_KEY: ${ADMIN_KEY}
      DEBUG: ${DEBUG}
      TZ: Europe/Berlin
    volumes:
      - ./logs:/logs
    env_file:
      - .env
    depends_on:
      - mongodb
      - redis
    mem_limit: 1g
    networks:
      - app

  # debug only
  prometheus:
    image: docker.io/library/prom/prometheus
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - app
    deploy:
      replicas: ${DEBUG:-1}

  grafana:
    image: docker.io/library/grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    volumes:
      - ./data/grafana-data:/var/lib/grafana
      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./grafana-dashboards/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yaml # dashboard setting
      - ./grafana-dashboards:/etc/grafana/dashboards # dashboard json files directory
    networks:
      - app
    deploy:
      replicas: ${DEBUG:-1}

  loki:
    image: grafana/loki:latest
    ports:
      - 3100:3100
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - app
    deploy:
      replicas: ${DEBUG:-1}

  promtail:
    image: docker.io/library/grafana/promtail:latest
    container_name: promtail
    volumes:
      - ./promtail.yml:/etc/promtail/docker-config.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/docker-config.yaml
    depends_on:
      - loki
    networks:
      - app
    deploy:
      replicas: ${DEBUG:-1}